// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/002_vk_user.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x5b\x53\xa3\x30\x14\x7e\xe7\x57\x9c\xb7\xd6\x59\x9d\x59\xdd\xd9\x7d\xf1\x89\xd2\xac\xa2\x14\x14\xe8\x3a\xee\x4b\x26\x42\xb4\x28\xb7\xe5\xe2\xe5\xdf\x6f\x02\x14\x48\x1b\x28\xca\x43\xa6\x3d\xf9\xce\x95\xef\x4b\x38\x39\x81\x6f\x51\xf0\x94\x91\x82\xc2\x3a\x55\xd8\x5f\xe7\xd6\x80\x20\x86\x9c\x7a\x45\x90\xc4\x30\x5b\xa7\x33\x08\x72\xa0\xef\xd4\x2b\x0b\xea\xc3\xdb\x86\xc6\x50\x6c\x98\xa9\xf6\xe3\x20\xf6\x87\xa4\x69\x18\x50\x5f\xd1\x6c\xa4\xba\x08\x5c\x75\x61\x20\xf0\xc2\xf2\x41\x99\x2b\xc0\x9e\xc0\x87\x85\x7e\xe1\x20\x5b\x57\x0d\xb8\xb1\xf5\x95\x6a\xdf\xc3\x35\xba\x07\xd3\x72\xc1\x5c\x1b\xc6\x71\x05\x8b\x49\x44\xe1\x8f\x6a\x6b\x97\xaa\x0d\xf3\xb3\x9f\xbf\x8e\x76\x00\x21\x25\x3e\xcd\x44\x48\xbd\x93\x07\x05\x3d\x95\x6d\x24\xa1\x8f\xf7\xe3\xd6\x7b\x5e\x12\x45\x34\x2e\xc4\x2d\xe5\xe8\x5c\x11\x1b\xf1\x49\xec\xb1\xac\x93\x5b\x69\x62\xfb\x6d\xce\xdd\x56\xa6\x35\x9b\x97\xd9\x41\x4c\x4a\x8a\x2c\x89\x3f\xa2\xc0\x93\x0e\x85\xbe\x8f\x96\x90\x92\x20\xc3\x5e\x48\xf2\x7c\x08\xc6\x51\xcf\xf1\xf3\x38\xa8\x8e\x95\xd1\x57\xbc\x53\x72\xbf\x94\xa4\xcc\xbc\xdd\x8d\x6a\x47\xb3\x4c\xc7\xb5\x55\xdd\x74\x9b\x41\x63\xcc\x67\x87\xcb\x38\xf8\x57\x32\x5e\x9a\xfa\xed\x1a\xc1\x9c\xdb\x9a\x58\x12\x0f\xd6\x29\x7e\x25\x61\x49\x73\xec\x6d\xa8\xf7\x02\xda\x25\xd2\xae\x61\xce\x27\xc0\xf8\x3c\x9f\x45\xb3\x63\x98\x3d\xce\x8e\x86\x43\x74\xc3\x90\x46\xea\xcd\xaa\x0a\xa8\xf2\x80\x0b\xbe\x68\x7c\x59\xf2\x05\x8d\xc5\x6f\xc7\x28\x0d\xdf\x0d\xb9\x8a\xbe\xb8\xe0\xf1\x6c\x87\xaf\x2b\xbe\x54\xbf\xb4\x0d\x4b\x30\xc4\x4f\xcc\xf5\xd6\x90\xb4\xb1\xd4\x5c\xe5\x45\x6c\x5f\x16\xd8\xe8\x37\xb2\x91\xa9\x21\xa7\x01\x35\x4a\x60\xbe\x07\xe0\x95\x9c\xf7\x72\x33\x09\xa5\xb4\x08\xaa\x83\xa0\xce\x3d\x5d\xee\xec\x61\x9e\xe1\xa0\x4c\x1a\x8c\xcf\x8f\x27\x57\x5f\x21\xc7\x55\x57\x37\x70\xa7\xbb\x97\xd6\xda\xad\x2c\xf0\xd7\x32\xd1\xbe\x07\x3f\x0c\x84\xa0\xfb\x75\xc7\x49\x14\xc4\xe4\xab\x65\xf7\xba\x3e\x34\xb5\x0e\xd9\xf0\x9d\x3d\x15\x01\x46\xd5\xc4\x9e\x88\x84\x94\x29\xa1\x64\xe7\x53\x3f\x78\x5b\xc3\x23\x3d\x84\x28\x3e\xd2\x2e\xcb\xe9\x77\xc9\x68\xd9\x0c\x76\xa4\x2d\x87\x91\xf7\x51\xd8\x16\xd7\x63\x7d\x37\x5f\x8c\x79\x1d\x22\xdb\xab\xca\x2a\xa2\x5b\xc6\x12\x5f\x99\x57\x9c\xdd\x26\xba\xdb\xfe\xd4\x0c\xd5\x71\x74\xad\x95\xd3\x70\xec\xb6\x03\x31\x41\xd7\xd8\x88\x58\xb9\x6d\x58\x67\x07\x33\x6f\x87\xb2\x93\xb9\x9d\xd5\x97\x33\x57\x6c\x15\xe9\x9a\xd1\xbc\x0c\x8b\x8e\xaa\x9f\x21\xeb\x97\xe9\xda\xfa\x7f\xfa\x38\xa9\x9e\xde\xb0\xc6\x3d\x3b\x60\xcf\xbb\xe9\x78\x4b\xb8\x1f\x67\x32\xc2\xb1\x6b\x27\x24\xec\x5a\x91\xd2\xbf\xd9\xc4\x8f\x59\x12\x0d\x21\x82\x9c\x9f\xcb\xb0\xb0\x2c\x43\x1e\x3e\x09\xe2\x22\x1f\xf2\x9e\xa2\x09\x00\x12\x86\xb8\xaa\x24\x1f\x2d\xa5\x07\x2b\x92\x1d\x90\x14\x35\x51\xbc\xa2\xcf\x44\x25\x0b\xac\xaf\x5f\x05\x96\xb1\x7d\xd2\x85\x38\x1a\x54\xd6\x90\x98\x43\xda\xf2\x84\x3b\x78\x4a\x46\xb9\x86\xa5\x03\x1b\xcd\xa8\xd4\x9a\xed\x7f\x50\x2f\x93\xb7\x78\xfb\x49\xdd\x7e\x4f\x73\xe3\xa4\x2f\xea\x2c\x09\x43\xb6\xfb\x40\xbc\x17\x65\x69\x5b\x37\xc2\x39\x70\xde\x37\xf5\x6e\x7f\xc1\xde\xa9\x4a\x30\xef\xe1\x6a\x7f\x11\xd3\x9d\x02\x82\xfd\x29\xc9\x52\xdc\x96\x99\x9f\x2b\xff\x03\x00\x00\xff\xff\x28\xf2\x71\x85\x41\x0c\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 3137, mode: os.FileMode(420), modTime: time.Unix(1472880925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations002_vk_userSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\x41\x4f\x02\x31\x10\x85\xef\xf3\x2b\xde\x0d\x88\x72\x31\xd1\x0b\xa7\x02\x1b\xdd\xb8\x2e\x58\xbb\x26\x9c\x48\xdd\x1d\xa5\xa1\x74\x9b\xb6\x88\x3f\xdf\xa2\xd1\xa8\x07\xc3\xdc\xde\x9b\xef\x1d\xbe\xf1\x18\x67\x3b\xf3\x12\x74\x62\x34\x9e\x72\x7c\xb8\xaf\x60\x1c\x22\xb7\xc9\xf4\x0e\x83\xc6\x0f\x60\x22\xf8\x8d\xdb\x7d\xe2\x0e\x87\x0d\x3b\xa4\x4d\xae\x3e\x77\x47\x28\x07\xed\xbd\x35\xdc\x11\xcd\x64\x21\x54\x01\x25\xa6\x55\x81\xd7\xed\x7a\x1f\x39\xd0\x90\x90\xcf\x74\x98\x96\xd7\x65\xad\xb0\x94\xe5\x9d\x90\x2b\xdc\x16\x2b\xd4\x0b\x85\xba\xa9\xaa\xf3\x0f\xe6\xd9\x84\x98\xd6\x4e\xef\x18\x8f\x42\xce\x6e\x84\x1c\x5e\x5c\x5e\x8d\xfe\x50\x56\xff\x0b\xd1\x68\x42\x44\x3f\xdd\xe6\xfd\xc1\x7d\xd9\x7d\xab\x1d\xcb\x93\xe4\x42\x6f\x6d\xfe\x3e\xe9\x76\x4b\x73\xb9\x58\xfe\xb6\x9b\xd0\x7b\x00\x00\x00\xff\xff\xe0\x31\x8b\x02\x46\x01\x00\x00")

func dbMigrations002_vk_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations002_vk_userSql,
		"db/migrations/002_vk_user.sql",
	)
}

func dbMigrations002_vk_userSql() (*asset, error) {
	bytes, err := dbMigrations002_vk_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/002_vk_user.sql", size: 326, mode: os.FileMode(420), modTime: time.Unix(1476945172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\x5b\x6f\x13\xc9\x16\x85\x9f\xdd\xbf\xa2\x89\xc4\x91\x2d\xe5\x38\x7d\xbf\x20\xf1\xc2\xe5\x48\x3c\x00\xd2\x81\xb7\xc9\x28\xaa\xee\xae\xf2\xb4\x70\xdc\xc1\x6d\x33\x09\x88\xff\x3e\xfb\xab\x5d\xce\x84\x19\x18\x5e\x26\x52\xa7\x2f\xb5\x6b\x5f\xd7\x5a\xe5\x8b\x8b\xf8\xf9\x34\xd8\x78\x63\x77\x76\x6f\x0e\x76\x88\xbb\xbb\x78\x33\xfd\xb7\x1b\x77\x83\x39\x98\x75\x24\x06\xf3\x74\xdc\xf7\x76\x7e\xc2\xf3\xd0\x5d\x5c\x8f\x1b\xb1\x1c\xa7\xdd\x7c\x91\x24\xe9\xd5\xb8\x1b\x0f\xa3\xd9\xae\xe7\x8f\xdb\xef\x19\x64\x57\x9f\x3e\x5c\x1d\x67\xbb\xff\xbe\xc1\x29\xce\x66\x62\xed\xc5\xdb\xf8\xcd\xdb\xf7\xf1\xcb\x17\xaf\xde\x3f\x8a\xa2\x1b\xd3\x7f\x30\x1b\x1b\xff\x69\x1e\x45\xe3\xf5\xcd\xb4\x3f\xc4\xcb\x68\x71\xd6\xdd\x1d\xec\x7c\x26\x0f\xfd\x74\x7d\xb3\xb7\xf3\x7c\xb1\xf9\x3c\xde\xf0\xc1\x5d\x1f\xb8\x8d\x93\xfe\xbf\x18\xa7\xe3\x61\xdc\xf2\x32\xf9\x0d\x37\xe6\xf0\xdb\x85\x1b\xb7\x96\x07\x3e\xcc\x87\xfd\xb8\xdb\xf8\xb5\xc3\x78\x6d\xcf\xa2\x55\x14\xb9\xe3\xae\x8f\x43\x7a\xff\xb7\x66\x58\xf2\x10\xff\xf2\x2b\x61\xcf\xe3\x9d\xb9\xb6\xb1\x6e\x5b\xc5\xcb\xd3\x57\xbb\xdf\x4f\xfb\x55\xfc\x25\x5a\x6c\x3e\xfb\xb7\xf8\xc9\xd3\x98\xac\xd6\x6f\xec\xef\x38\xb1\xfb\xa5\x4f\x9b\xf7\x67\x47\xe7\xe4\x1d\xb7\xab\x55\xb4\x18\x9d\xdf\xf0\xe8\x69\xbc\x1b\xb7\xb8\x58\xec\xed\xe1\xb8\xdf\xf1\x7a\x1e\x4b\x49\xeb\x97\x78\x77\xcb\x33\x1c\xc5\x8f\x3f\x3e\x89\x1f\x7f\x3a\xd3\x4c\x7c\x2c\xf1\xf1\x35\x8a\x16\x9f\xcc\x3e\xee\x8e\x2e\xd6\x38\x1a\x24\x5a\x5c\x69\x3a\x4f\xe3\x71\x5a\x3f\x9f\x6e\xee\x96\xff\x11\x9b\x73\xc9\x4d\x76\xf5\xdb\x97\xa7\x4c\xd7\xcf\xb7\xd3\x6c\x97\x52\xfe\xbf\x94\x0f\x6e\xd4\xff\x0f\x1c\x89\xa1\xe6\x1d\x3e\x4a\x5a\xeb\x67\xa4\xbe\x5c\x9d\x63\x11\xc9\xda\xe1\xee\xc6\xc6\x66\x9e\xed\x81\x96\x1f\xfb\x03\x5e\x7c\x7d\x61\x1e\x12\x66\xe7\xa6\x38\x9e\xe6\xf5\xff\x64\xac\xaf\xe4\xe5\x7e\x5f\x18\xe1\xe9\xfb\x03\x0f\x7e\x86\xf2\xa7\x63\x8c\x16\xf3\xf8\xd9\xbf\x8f\xbb\x43\x55\x44\x8b\x6b\x78\x11\xdf\x3b\x7d\x2d\xaf\xfe\xe3\x7b\x41\x48\x0c\x4c\xd6\x3c\x11\xc7\x43\x65\xe9\xc6\xbf\xc6\x5a\xc5\x6f\x24\xc4\x72\x15\x22\x10\x33\x54\xe9\xc6\x35\xd1\x65\xf3\x8f\xf7\xbe\x93\x74\x64\xaf\xcf\xe6\xdb\xad\x24\xfa\x8f\x5b\xc9\x55\xb6\x3e\xc8\xfc\x5b\x07\x94\xf6\x33\x07\x14\x27\x3e\xee\x0b\xfd\x9b\x87\x50\xfd\x8f\x9d\xbc\x9a\x5f\x8c\x7b\x71\xd1\x4d\xd3\xf6\xe1\x6e\xb3\x9d\x7f\x52\xf9\xdd\xac\x85\xdb\xbd\x33\xbd\xfd\xf2\xf5\xc1\xee\x00\x09\x50\x7e\x35\x74\xaf\xef\xa5\xe1\x81\x14\xbd\xfb\xb8\x15\xa0\x2b\x32\x96\x67\x97\xb7\xa9\xbb\xbc\x6d\xba\xcb\xdb\xa4\x91\x2b\x09\x57\x7b\x79\x5b\x59\xf9\x1e\xbe\x39\xb1\x69\xfb\xcb\xdb\xb2\x92\x4b\x6c\xcb\xfc\xf2\xd6\xc8\x95\xcb\x5a\x5a\x5c\xde\xd6\x62\x6b\x6b\xf9\x5e\xab\x5d\x27\xf7\x01\x5b\xf1\xd3\x0e\x7a\x1f\xe4\x3e\xc8\xbd\x96\xbb\x4b\xc5\x37\xdf\x32\xf1\x23\xf6\x26\x53\x3f\x5c\x56\x62\xe6\x46\xee\xe2\xb3\x90\x58\x99\xf8\x29\x64\xbd\x93\xb5\xac\x51\xdf\xb6\x94\x2b\xd3\xfb\x20\xb9\x55\x72\x25\xc1\x47\x21\x36\x69\xa7\xb6\xbd\xf8\x29\xc8\x55\x7c\xe4\xc4\x95\x98\xbd\xf8\x6d\xd9\xef\xd4\x7f\x4e\x3c\xf9\xde\xa4\xea\xa7\x94\xbb\x93\xba\x5a\xf1\xd5\x92\xa7\xf8\xed\x33\xcd\xa9\x24\x9e\xd8\x97\x4e\xeb\xa5\xc6\x46\x6c\x33\xb9\x9a\x4a\x6b\xaf\x89\x29\x76\xad\x7c\xeb\x0b\xed\x11\x3d\x33\x62\x9f\xe7\xda\xe7\x9a\xba\x13\xcd\x61\xa0\x2e\xfa\x2f\x97\x95\xbd\xbd\xd8\x0c\x9d\xfa\xeb\xe9\xa1\xd8\x55\xe2\xb7\x95\x7d\x46\xf2\x74\xf2\xcd\xe6\x1a\x93\xe7\x46\xfc\x1a\xf1\x51\xc9\x5a\xda\xa8\x3d\xf9\x0d\xa9\xee\x63\xad\x33\x1a\xb7\x24\x3f\xc9\xad\x4a\xc3\xfe\x44\x6b\x73\x72\x15\xf2\xad\x6d\x35\x97\x9e\xfa\xad\xde\xf1\xdf\x94\x61\xc6\x61\x9f\xc7\x80\x7c\x4f\xa4\xa7\x1d\x33\xa1\x67\xa5\xf6\xb5\x32\x3a\x13\xea\xc8\xcb\x10\x9b\x5e\xe5\x5a\x77\x9f\x6a\x1e\xcc\x88\xfa\x6a\x79\x4f\x4a\xc5\x60\x21\xf1\x8b\x42\xe3\x34\x4e\x7d\x55\xf2\xbd\xa5\x46\xa3\xf1\x9c\xf8\xe9\xe4\x6a\x65\xbd\x03\xbb\x92\x57\x5d\x29\x4e\x33\xf2\x13\x5f\x39\xb9\x0f\xea\x0b\x3c\x74\xf2\xdc\xe6\x9a\x07\xb1\xc0\x82\xcf\x55\xee\x99\xd8\x98\x10\xcf\xd5\xda\x5b\xe6\x5a\x53\xa3\xf8\x49\x33\x9d\x67\xce\x9c\xac\xce\x34\x1b\x02\x06\x43\x4f\xd3\x54\xeb\x01\xd7\xd4\x60\x7b\xed\x09\xd8\x26\x2e\xfd\x62\x3e\x15\xbd\xee\x34\x2e\x38\x84\x13\x70\xca\xe3\x93\xfe\x85\x5a\xe1\x09\xf3\x28\x64\x7f\x21\x75\x37\x72\x65\xbd\x72\x26\x77\xca\x17\x3f\x23\x6a\xb2\x3a\x9f\xce\x6a\x0d\x6d\xa5\xd8\x6b\x33\x9d\x15\x73\xa0\x0e\xfa\xc0\x9c\xeb\x5e\xb1\xe0\xb1\x25\x31\x7a\xa7\x79\xd3\x57\xb8\x60\x1a\xed\x29\xfd\x01\x43\xcc\xb9\xeb\x95\xf3\xcc\x8f\x9e\xc3\x0d\x70\xd5\xf7\xba\x46\x1d\xcd\xa0\xf3\x2a\x6a\x9d\x0f\xb9\xf7\x3c\x97\x81\x37\xb2\x5e\x17\x5a\x23\xb5\x55\xb9\xee\xaf\x6a\xc5\x58\x1f\xb8\xe8\x1a\x8d\x99\x67\x9a\x77\x2b\x3e\x1d\x7a\x20\xfb\x53\xa3\xf8\x81\x67\x70\x84\xb5\xb2\xd1\x19\x25\x4e\xe7\x96\xb5\x8a\xd5\x2c\xe0\x9c\x79\xd4\xb9\xce\x84\xbe\x53\x1f\x73\x46\x2f\x06\xa3\x76\x5e\x87\xac\xda\x33\x97\xac\xd6\xfe\x92\x4b\xde\x2b\xd6\xc0\x00\x75\x91\x37\x5c\xcc\xc3\x0c\xe9\x15\x5c\x45\x67\xa8\x8f\x7e\xd3\xff\xa2\x0a\x7c\x1e\x02\x76\x4d\x88\x9d\xa9\x66\xc0\x77\x66\x56\x35\x3a\x13\x34\x92\x35\xcf\x05\x7c\x97\xaa\x47\xf4\x10\x2d\x03\xfb\xf0\xca\x73\xae\x55\x4c\xb0\x1f\xfe\xd9\x44\x67\x08\xdf\xbd\x1e\x38\xe5\x31\xeb\x65\xa1\x33\x43\x3f\xd9\xeb\x35\x2f\x68\x53\xe1\x74\x06\x70\x77\x08\xb8\xc1\x0e\xec\xa2\x4b\x60\x1b\x9c\x53\x3b\xbe\xd1\x95\xb4\x52\x0d\xf4\x3a\xcd\x7c\x33\xd5\x49\xb4\x09\xfe\xa1\x73\x49\xaa\x78\x06\xbb\x55\xa2\x79\xc0\x3d\xf2\x04\x57\xcc\x8f\x19\x80\x27\xaf\x89\xb2\xd7\x94\x21\xc7\x46\xfb\xd5\xe4\xaa\x91\xf4\x98\x5e\x97\x83\x9e\x09\x7e\x8e\xa9\xea\x13\x3a\x81\x0d\x58\x03\x1b\x4d\xaf\x78\x86\x07\x59\x38\x8f\xc8\x99\xbc\xe8\x23\x38\xf4\xd8\x22\x76\xa2\xb9\x76\x27\xce\x55\x8a\x07\x33\x28\xd7\xd0\xc6\x21\xe0\x10\x1e\x9c\x6a\x80\x7f\x09\x7d\x2e\x34\x36\x7c\x46\x53\xf1\x0f\xd6\x38\x83\xe8\xad\x65\x1d\xae\x97\x5a\x2b\x3a\x88\x2e\xa1\x23\x70\x02\xde\xc2\x73\x7f\xd6\x0c\x5a\x63\x5a\x6a\xef\xc0\xce\x50\xaa\x9f\x36\x9c\xc3\xc4\x83\x77\xe0\x1b\xbd\xaa\x8a\x70\xe6\xe6\x9a\x53\xdd\xa8\xce\x80\xbf\x2c\x57\x7f\x4d\x38\x33\x89\x0b\xc6\xbd\x7e\x71\xce\xc0\x09\x30\xde\x2a\xfe\xc8\x83\x9a\xd0\x51\x13\xf4\x0d\x1c\x31\x57\x72\x47\x27\x98\xb9\x9f\x7d\xad\x1c\xe0\x1c\xcf\x43\x7f\xe9\x7b\x4d\xed\xf4\x2e\x53\x6e\x52\x3b\xe7\x6f\x66\x54\xaf\xca\xa0\xf7\x70\x95\x3d\x9c\x35\xa7\xdf\x0b\x68\x03\xe7\x3c\x3d\x62\xaf\xb3\x8a\x3f\x72\xa2\x0f\x9c\x11\x70\xcb\x04\xdd\xf6\x67\x49\x12\x74\x16\xed\xa7\xde\x54\x75\x85\xfc\xc8\x95\x9e\xa1\x0d\x70\x05\xde\xf3\x8c\xd6\x24\xe1\x1c\x86\x5b\xcd\x09\xbf\xb9\xda\x31\x07\xe2\xb5\xc1\x86\xfc\xc0\x3d\x73\xa1\x67\xe8\x8d\xc7\x42\x1f\x30\xd0\x29\xff\xc1\x6b\x1b\x70\x66\x03\x9e\xb0\x1f\x82\x76\xd5\x4e\xef\x79\x38\xc3\x99\xe9\x00\x77\x13\xed\x09\xb3\xca\x3b\xe5\x0a\xf8\xed\x4e\x33\x6a\x94\xaf\x70\x9c\xdf\x69\x55\xc0\x23\x67\x36\x1c\xe5\x6c\x04\xe7\x9c\x61\xf4\xa2\x34\x3a\xb3\x21\xe8\x34\x73\x05\x43\xf0\x01\x7d\xf1\x3a\x39\x68\x9e\xfc\xae\x69\x83\xb6\x81\x09\x72\xe1\x02\xfb\x68\x59\x6a\x15\x37\x70\x93\xdf\x5a\xcc\x95\x1c\xd0\x28\xf2\x67\xa6\xac\x71\xee\xe2\x17\x0d\xec\x02\x77\xc9\x07\x5b\x70\x04\xaf\xe9\x39\x7a\xc4\x99\x04\x46\xda\xf0\xbb\x11\x8d\x28\x43\x3f\xfd\x99\xe6\xf4\xcc\x46\x93\xd1\x47\xff\xdb\xd0\x29\x5e\xd0\x45\xce\x36\xea\x06\x7b\xd4\xc8\xb9\x47\x4f\xe1\x3e\x3a\x77\xd2\x30\xf4\x99\x1a\x7c\xff\x33\xe5\x01\xfd\xf5\xfd\x34\xca\x2f\xaf\xa1\x55\xc8\x2f\x0f\xbf\x47\xc2\xf9\x00\xf6\x98\xf5\x1f\x01\x00\x00\xff\xff\x3a\x9c\xa4\x79\x00\x10\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1476945173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/002_vk_user.sql": dbMigrations002_vk_userSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": {nil, map[string]*bintree{
			"001_initial.sql": {dbMigrations001_initialSql, map[string]*bintree{}},
			"002_vk_user.sql": {dbMigrations002_vk_userSql, map[string]*bintree{}},
			"bindata.go":      {dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
