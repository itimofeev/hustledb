// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/002_forum.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x5b\x53\xa3\x30\x14\x7e\xe7\x57\x9c\xb7\xd6\x59\x9d\x59\xdd\xd9\x7d\xf1\x89\x52\x56\xab\x48\x95\xb6\xbb\xe3\x53\x26\x42\xb4\xd1\x70\x59\x2e\x5e\xfe\xfd\x26\x81\x02\xa1\x81\xa2\x3c\x64\xda\x9c\xef\x5c\xf9\xbe\x84\x93\x13\xf8\x16\xd2\xa7\x14\xe7\x04\x36\x89\xc1\xff\xae\xee\x1c\xa0\x11\x64\xc4\xcf\x69\x1c\xc1\x64\x93\x4c\x80\x66\x40\xde\x89\x5f\xe4\x24\x80\xb7\x2d\x89\x20\xdf\xf2\xad\xd2\x4f\x80\xf8\x1f\x9c\x24\x8c\x92\xc0\xb0\x3c\xdb\x5c\xdb\xb0\x36\x67\x8e\x0d\x3e\x2b\x1e\x8c\xa9\x01\xfc\xa1\x01\xcc\x16\x17\x2b\xdb\x5b\x98\x0e\xdc\x7a\x8b\x1b\xd3\xbb\x87\x6b\xfb\x1e\xdc\xe5\x1a\xdc\x8d\xe3\x1c\x4b\x58\x84\x43\x02\x7f\x4c\xcf\xba\x34\x3d\x98\x9e\xfd\xfc\x75\xd4\x01\x30\x82\x03\x92\xaa\x90\xd2\x92\xd1\x9c\x9c\xea\x0c\x31\x0b\xd0\x7e\xdc\xd2\xe6\xc7\x61\x48\xa2\x5c\x35\x19\x47\xe7\x86\xda\x48\x80\x23\x9f\x67\x1d\xdd\x4a\x15\x3b\xa8\x73\x76\x5b\x19\xd7\x6c\x56\xa4\x07\x31\x09\xce\xd3\x38\xfa\x08\xa9\xaf\x1d\x0a\x79\x1f\x2c\x21\xc1\x34\x45\x3e\xc3\x59\xd6\x07\x13\xa8\xe7\xe8\x79\x18\x54\xc6\x4a\xc9\x2b\xea\x94\xdc\x2e\x25\x2e\x52\xbf\x6b\x90\x16\x6b\xe9\xae\xd6\x9e\xb9\x70\xd7\xd5\xa0\x11\x12\xb3\x43\x45\x44\xff\x15\x9c\x97\xee\xe2\x6e\x63\xc3\x54\xec\x55\xb1\x34\x1e\xbc\x53\xf4\x8a\x59\x41\x32\xe4\x6f\x89\xff\x02\xd6\xa5\x6d\x5d\xc3\x54\x4c\x80\xf3\x79\x3a\x09\x27\xc7\x30\x79\x9c\x1c\xf5\x87\x68\x86\xa1\x8d\xd4\x9a\x95\x0c\x68\x8a\x80\x33\xb1\x58\x62\x99\x8b\xc5\x1e\x8a\x5f\x8f\x51\x1b\xbe\x19\xb2\x8c\x3e\xbb\x10\xf1\xbc\x95\x58\x6f\xc4\x22\x7f\x59\x5b\x9e\xa0\x8f\x9f\x48\xe8\xad\x22\x69\xb5\x53\x72\x55\x14\xb1\x7b\x59\xe0\xd9\xbf\x6d\xcf\x76\x2d\x7b\x55\x81\x2a\x25\x70\xdf\x03\x70\x29\xe7\xbd\xdc\x5c\x42\x09\xc9\xa9\x3c\x08\xca\xdc\xe3\xe5\xce\x1f\xee\xc9\x7a\x65\x52\x61\x02\x71\x3c\xcd\x45\xca\x3d\x93\x50\xbd\xe2\xbd\x5f\x60\x14\x87\x34\xc2\x5f\xad\xaf\xd5\xde\xa1\xf1\x34\xc8\x8a\xd8\xfc\x91\x6f\x7a\x50\x36\xfc\x09\x31\x23\x9c\xf2\x05\x3f\x88\xda\xc1\xeb\x1a\x1e\xc9\x21\x44\xfe\x91\x34\x59\x4e\xbf\x6b\x66\xc8\x67\xd0\xd1\xb0\x1e\x86\xdf\x07\x61\x3b\x5c\x8b\xde\xcd\x7c\x11\x12\x75\xa8\xb4\x96\x95\x49\x46\x2f\x9d\x39\xba\x72\xaf\x04\x8d\x5d\xfb\xef\xee\xa7\xe5\x98\xab\xd5\xc2\xaa\x75\xd3\x1f\xbb\xee\x40\x4d\xd0\x34\x36\xa0\x4a\xb1\xd7\x2f\xa8\x83\x99\x77\x43\xe9\x64\xae\x67\xf5\xe5\xcc\x92\xad\x2a\x5d\x53\x92\x15\x2c\x6f\xa8\xfa\x19\xb2\x7e\x99\xae\xb5\xff\xa7\xcf\x0d\xf9\xb4\x86\x35\xec\xd9\x00\x5b\xde\x55\xc7\x3b\xc2\xfd\x38\xd3\x11\x8e\xdf\x2f\x0c\xf3\xfb\x43\x4b\xff\xca\x88\x1e\xd3\x38\xec\x43\xd0\x4c\x1c\xc0\x30\x5b\x2e\x1d\x7d\xf8\x98\x46\x79\xd6\xe7\x3d\x46\x13\x00\x98\x31\x24\x2b\xc9\x06\x4b\x69\xc1\xf2\xb8\x03\xd2\xa2\x46\x8a\x57\xf5\x19\xa9\x64\x85\xf5\xe5\xab\x40\x3a\xb6\x8f\xba\xf9\x06\x83\xea\x1a\x52\x73\x68\x5b\x1e\x71\xd9\x8e\xc9\xa8\xd7\xb0\x76\x60\x83\x19\x8d\x52\xb3\xed\x2f\xe7\x79\xfc\x16\xed\xbe\x9d\xeb\x0f\x67\xb1\x39\xea\xd3\x39\x8d\x19\xe3\xd6\x07\xec\xbf\x18\x73\x6f\x79\xab\x9c\x03\xe7\xed\xad\xd6\x35\xaf\xec\x37\xaa\x52\xb6\xf7\x70\xa5\xbf\x8a\x69\x4e\x01\x65\xff\x29\x4e\x13\x54\x97\x99\x9d\x1b\xff\x03\x00\x00\xff\xff\xd4\x1c\x7e\xce\x2a\x0c\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 3114, mode: os.FileMode(420), modTime: time.Unix(1477734087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations002_forumSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\xc1\x6e\xe2\x30\x10\xbd\xfb\x2b\xe6\x06\x68\x97\x03\x48\xbb\x5a\x89\x53\x00\x2f\x8d\x9a\x06\x6a\x42\x25\x4e\x28\x24\x03\xb8\x4d\x6c\x2b\x18\xc1\xe7\xd7\x60\xd5\x84\x14\x4a\xd3\x9c\xec\x99\xf7\x26\x33\xcf\xf3\xda\x6d\xf8\x95\xf3\x75\x11\x6b\x84\x99\x22\xe6\x3a\x7d\x0e\x80\x0b\xd8\x62\xa2\xb9\x14\xd0\x98\xa9\x06\xf0\x2d\xe0\x01\x93\x9d\xc6\x14\xf6\x1b\x14\xa0\x37\x26\x64\x79\x47\x90\xb9\xc4\x4a\x65\x1c\x53\x32\x60\xd4\x8b\x28\x44\x5e\x3f\xa0\xb0\x5a\xa8\xb8\xd0\xfc\x88\x21\x4d\x02\xe6\xe3\x29\xf4\xfd\xd1\x94\x32\xdf\x0b\x60\xc2\xfc\x27\x8f\xcd\xe1\x91\xce\x21\x1c\x47\x10\xce\x82\xe0\xb7\x85\x89\x14\x0f\xe0\x87\x11\x1d\x51\x56\xc9\x25\x32\x57\x68\x8b\x2e\x6c\x39\x83\x73\x18\x60\xf4\x3f\x65\x34\x1c\xd0\x69\x19\x49\x5a\x3d\x52\xed\xed\x75\x97\xae\x11\x6a\xf5\x95\xc6\x22\xc1\xe2\xce\x6f\x2d\xc8\x12\xdc\xfc\x77\x38\x25\xa5\x2c\x31\x43\xad\xb1\x80\x17\x8f\x0d\x1e\x3c\xd6\xec\xb4\x1c\xed\xda\x28\x42\xe6\x5c\xd8\xb7\xa8\x35\xcf\x8f\xdb\x33\xe7\x0c\x5d\x77\xdd\x3f\x7f\xbf\xee\x4f\x65\x71\x52\x53\xea\x13\x65\xb1\x2a\x64\x7e\x63\x0f\x2c\x40\xcb\x1b\x69\xb1\xcb\x97\x46\xc0\xeb\xc9\xad\x8e\xd7\x86\x7b\x31\x44\xa7\xfb\xaf\x55\xad\xe1\x64\xbd\xab\xcf\x19\x5a\xde\x94\x4e\x8d\x55\xb1\xe7\x6e\x89\xf1\x09\x78\x92\x96\x94\x3d\x3b\x94\x7b\xf1\xe1\x5a\x67\xd9\x63\xf0\x5b\xa6\x2d\x64\x96\x99\xec\x32\x4e\xde\xc8\x90\x8d\x27\x97\xef\xd5\xbb\x8c\x9d\xec\x52\x89\x9d\xa7\xae\x24\xdc\xba\xf4\xc8\x7b\x00\x00\x00\xff\xff\x44\x3b\x94\x8e\x63\x04\x00\x00")

func dbMigrations002_forumSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations002_forumSql,
		"db/migrations/002_forum.sql",
	)
}

func dbMigrations002_forumSql() (*asset, error) {
	bytes, err := dbMigrations002_forumSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/002_forum.sql", size: 1123, mode: os.FileMode(420), modTime: time.Unix(1477823636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\x5b\x8f\xdb\xc6\x15\xc7\x9f\xc5\x4f\xc1\x2c\x90\x42\x02\x5c\x2d\xef\x17\x03\x7e\x89\xed\x02\x7e\x88\x03\x34\x7e\xeb\x16\x8b\x21\x67\x46\x25\x2a\x89\x6b\x51\x4a\x77\x1d\xe4\xbb\xf7\xfc\xe6\xcc\x5e\xd2\xc6\xf5\x4b\x17\xe0\x0e\x39\x73\xe6\x5c\xff\xe7\x7f\x74\x7d\x9d\xbe\x9d\xad\x4b\x77\xee\xe8\x4e\xe6\xec\x6c\x3a\x3c\xa4\xbb\xf9\xcf\xc3\x74\xb4\xe6\x6c\xb6\x89\x08\x2c\xf3\xe5\x34\xba\xe5\x35\xef\x76\xb8\x3e\x4c\x3b\x91\x9c\xe6\xe3\x72\x9d\x65\xf9\xed\x74\x9c\xce\x93\xd9\x6f\x97\xcf\xfb\x3f\x12\x28\x6e\xfd\x7c\xba\x1c\xfe\xf8\xf8\xd1\xca\x6e\xe6\xec\xdd\x4f\xe9\xc7\x9f\x3e\xa5\xef\xdf\x7d\xf8\xf4\x5d\x92\xdc\x99\xf1\x9f\x66\xe7\xd2\x67\xf1\x24\x99\x0e\x77\xf3\xe9\x9c\xae\x93\xd5\xd5\xf0\x70\x76\xcb\x95\xbc\x8c\xf3\xe1\xee\xe4\x96\xe5\x7a\xf7\x65\xba\x63\xc3\x1f\xce\x2c\xd3\xac\xff\xaf\xa7\xf9\x72\x9e\xf6\x7c\xcc\xe1\xc2\x9d\x39\xff\xe3\xda\x4f\x7b\xc7\x0b\x1b\xcb\xf9\x34\x1d\x77\xe1\xec\x3c\x1d\xdc\x55\xb2\x49\x12\x7f\x39\x8e\x69\x74\xef\xaf\xce\xd8\x35\x2f\xe9\xdf\xfe\x8e\xd9\x57\xe9\xd1\x1c\x5c\xaa\xd7\x36\xe9\xfa\x71\xd7\x9d\x4e\xf3\x69\x93\xfe\x9a\xac\x76\x5f\xc2\x57\xfa\xfa\x4d\x8a\x57\xdb\x8f\xee\x5f\x28\x71\xa7\x75\x70\x9b\xef\x1f\x2e\xde\xcb\x37\x6a\x37\x9b\x64\x35\xf9\x70\xe1\xbb\x37\xe9\x71\xda\xa3\x62\x75\x72\xe7\xcb\xe9\xc8\xe7\xab\x54\x42\xda\xbe\x47\xbb\x5f\x5f\xa1\x28\xfd\xfe\xf3\xeb\xf4\xfb\x5f\xae\xd4\x93\x60\x4b\x74\xfc\x96\x24\xab\x5f\xcc\x29\x1d\x2e\x3e\x55\x3b\x6a\x24\x59\xdd\xaa\x3b\x6f\xd2\x69\xde\xbe\x9d\xef\x1e\xd6\x7f\x12\x99\x57\xe2\x9b\xdc\x1a\xf7\xef\x1f\x3d\xdd\xbe\xdd\xcf\x8b\x5b\x4b\xf8\xff\x27\x7f\x50\xa3\xfa\xbf\xa2\x48\x04\xd5\xef\xb8\x29\x6e\x6d\x7f\xc0\xf5\xf5\xe6\x15\x12\x89\x9c\x9d\x1f\xee\x5c\x6a\x96\xc5\x9d\x49\xf9\x65\x3c\xa3\x25\xc4\x17\xeb\x21\x66\x8e\x7e\x4e\xd3\x79\xd9\xfe\x45\xca\xfa\x41\x3e\x9e\xee\xc5\x12\x3e\xee\xbf\xd0\x10\x6a\x28\x7f\x5a\xc6\x64\xb5\x4c\x5f\xc2\xf7\x74\x3c\x37\x55\xb2\x3a\xd0\x15\xe9\x93\xd2\x1f\xe5\x33\x6c\x7e\x12\x84\xa4\xc0\x64\xcb\x1b\x76\x02\x54\xd6\x7e\xfa\x4f\x5b\x9b\xf4\xa3\x98\x58\x6f\xa2\x05\x6c\xc6\x28\xfd\xb4\xc5\xba\x5c\xfe\xfa\xdd\x9f\xc5\x1d\xb9\x1b\xbc\xf9\xfd\x55\x1c\xfd\x9f\x57\xf1\x55\xae\xbe\xf0\xfc\xf7\x0a\x08\xed\x5b\x0a\x08\x4e\x74\x3c\x05\xfa\x5f\x1a\x62\xf4\x5f\x57\xf2\x61\x79\x37\x9d\x44\xc5\x30\xcf\xfb\x97\xb7\xcd\x7e\xf9\x46\xe4\x0f\x8b\x06\xee\x4e\xde\x8c\xee\xd7\xdf\x5e\xdc\x8e\x90\x00\xe5\xb7\x76\xf8\xf1\x89\x1a\x5e\x10\xd1\xcf\x9f\xf7\x02\x74\x45\xc6\xfa\xea\xe6\x3e\xf7\x37\xf7\xdd\x70\x73\x9f\x75\xf2\x64\xf1\xe9\x6f\xee\x1b\x27\xfb\x71\xcf\x8b\x4c\x3f\xde\xdc\xd7\x8d\x3c\x22\x5b\x97\x37\xf7\x46\x9e\x52\xce\xf2\xea\xe6\xbe\x15\x59\xd7\xca\x7e\xab\x72\x83\xac\x16\x59\xd1\xd3\x5b\x5d\xad\xac\x56\xd6\x56\x56\x9f\x8b\x6e\x79\xaf\x0b\xd5\x69\x44\x67\x25\xb6\xfa\x5a\xee\xca\xf7\x20\xdf\xae\x54\x3b\x85\x7c\x57\x22\x37\x88\x1d\x2b\xf7\xda\x4c\xf5\x15\x62\xb3\x96\xc7\xf3\x58\x95\xeb\xe4\x3c\x13\x59\x93\xeb\xbb\x91\xf7\x52\xfc\x69\xb8\x6b\xd4\x37\x27\xb1\xd4\xb2\x7a\xd1\x31\x10\xa3\x9c\xf5\x62\x27\x97\xc7\x8b\x0f\xb9\xe8\xb1\xe8\x68\x35\x36\xe2\xca\x64\x2d\x1b\xf5\x79\xcc\x35\x1f\x86\x98\xe5\xc9\x45\x97\x21\x0f\xb9\xda\x19\x79\xe4\xbc\xe9\xf5\x6c\x8c\xfb\xd8\xa8\xe4\xbb\x13\xd9\x86\x98\x64\xb5\x2e\xe6\x41\xe4\x9d\xc8\x14\x95\x9e\x93\xbf\xc2\xea\x59\x81\x9c\x9c\x7b\x7c\xb2\xea\x5b\xe5\x55\x2e\xf8\x1b\x6b\x13\xee\xca\xda\xcb\xf9\x88\x8e\x4c\x63\xb7\x83\xc6\xcb\x1a\xf6\xc4\x76\x23\xfa\x3b\xb1\x9d\x89\xbe\x52\xd6\x42\xce\x72\xa7\xf7\x8d\xd8\xcc\x88\x71\xd4\x3c\xf2\x3e\x8e\x9a\x97\xbc\x55\xd9\xa0\x53\x9e\x1e\x7c\xc8\x3d\x2b\xe7\xad\x51\x1c\xe5\x9c\x97\x5a\xc3\x4e\xe4\x1b\x59\x7d\xd4\x8f\x9c\x93\x1a\xe7\x46\xdf\x3b\xab\x75\x26\x4f\x15\x3a\x3b\xad\x47\x55\x6a\x1d\x5b\xaf\x39\x23\x9f\x83\xdc\x29\xa9\x83\x55\xbb\x7d\xac\x3b\x7e\xb6\xa2\xd3\x56\xea\x2b\x98\xec\xe4\x6e\x56\x6a\x2e\x0c\x75\xcf\x34\x6f\x7c\x83\x21\xf2\x15\xb0\x20\x67\x99\xac\x25\x71\xe2\x77\xa6\x58\xc6\x37\xe4\x9d\xc4\x3c\x12\x43\xae\xf8\x04\x4f\xe4\xb2\x24\x06\xc9\x53\xd5\x2a\x3e\xba\x46\xf1\x85\x0c\x75\x29\xb0\xed\x35\xcf\xb9\x55\xec\x57\x72\x9e\xcb\xbd\x52\xec\x18\x91\x6b\x45\xa6\x8d\xfd\x84\x2e\x8b\x9d\xd8\x63\x86\x58\xda\xe8\x17\x98\x73\x9a\xd3\x52\xee\x79\xa3\xbd\x4a\x9d\x8c\x57\xfd\x99\xec\xb5\xbd\x62\xa1\x00\x0b\xb9\xe2\x8e\x7c\x55\xb5\xd6\x78\x2c\x63\x1f\x36\xaa\x1b\xbc\xe3\x07\xfe\xbb\x2e\xde\x97\xb5\x06\xbf\x8d\xfa\x3b\xf6\x5a\x6f\xf2\xd4\x57\x9a\x17\xfa\xae\xa8\x63\xff\xd1\x97\x5e\x6b\x4c\x8e\xc1\x08\xef\xae\xd7\xfe\xc0\x16\x75\x1a\x7a\xed\x5b\x62\xb4\xf5\x73\xbf\xe4\xdc\x2f\xb5\xde\xf8\x59\x55\xda\x5b\xe4\x29\xd4\xa8\xd5\x1e\x73\x85\xf2\x51\x53\xc6\x38\xe8\x4b\x72\x05\x5f\xc4\x38\xc1\xd7\x30\x2a\x67\x78\x7a\xc1\x68\xbc\x15\xe7\x85\xf6\x57\xe3\xb5\xa7\xb0\x01\xbe\xf0\xcf\x88\x8e\x06\x8e\xb2\xcf\xba\x1f\xfb\xd4\x97\x9a\x97\xd2\x68\x1d\x8a\x56\xf1\x00\xc6\xd8\xc7\x47\xb0\xeb\xeb\x88\xf5\x4e\xb1\x10\xf8\xc7\x2a\x26\x7b\xa3\xbc\x06\xce\xc2\xb9\x51\xdd\x65\xa9\xbe\x83\xf9\x06\x6c\xf6\xda\x3f\x63\x1d\x7b\xd1\x28\x2f\x74\xf0\x55\xae\x7d\x05\x5f\x81\x95\xa1\xd0\x5e\xa5\xae\xf4\x59\x9e\x29\xa7\x12\x3f\xb6\x82\x4e\xaf\x5c\x54\xc4\x3e\x22\x17\xa1\x67\x9d\xe6\x1f\xbd\x60\x14\xcc\x52\x7f\xb8\x05\x59\x78\x6b\xa8\x35\x8f\x6d\xa1\x39\x86\x07\xf1\xb5\x1d\x54\x8f\xcb\x94\xcb\x43\xed\xad\xf6\x27\x58\x86\xb3\x82\x4c\xad\xfc\x5b\x18\xc5\x4a\x1b\x39\x8c\x9e\xe4\xbd\xe8\x15\x77\x83\x55\x4c\xd1\x53\x70\x7c\xc0\x7a\xaf\xd8\x86\xbb\xc0\xf9\x18\xb9\x02\x9e\x80\x3b\xe8\x05\x70\x0e\x2e\x90\x85\x77\x9a\x5a\xb1\xd8\x44\xfe\x6f\x73\xbd\x3f\x5a\xc5\x15\x3a\x02\x6f\x50\xdf\x4c\xed\x82\x29\x56\x72\xdc\xc4\x39\x46\x0d\xc1\xd2\x58\xe8\x3e\x39\xa1\xc7\xc0\x2c\x5c\x4d\x5d\x7d\xc4\xdb\x18\x6b\x69\x3b\xe5\xa0\x3e\xd7\x9c\xe3\x4f\x1d\x79\x96\x7d\x62\xa2\x8f\x03\x27\x8c\xca\xe3\x19\x3d\xe9\x75\xbe\xc2\x1b\xf4\xaa\x1b\x94\x17\xf3\x18\x17\x3d\x1c\xfa\xc1\xa9\x6e\x6c\x06\x3c\xbb\xe7\x9e\x63\x8e\xe0\x07\x3c\x03\x77\xc1\x6d\x70\x7c\xc0\x4f\x13\x73\x1e\xf9\xab\x8c\x73\x00\x8c\x11\x0b\xb9\x69\xc7\xe7\x3e\x84\x43\xe1\x03\xe6\x6c\xdf\x28\x8e\x2a\xec\x51\x57\xaf\x73\xbc\xec\x95\x87\xc1\x05\x79\x61\x2e\x76\xb1\x77\xe0\x78\x17\xeb\xc2\xec\xa4\x56\xf0\x34\xb3\x9d\xfc\x8d\x91\x8b\x03\x57\x97\x5a\xc3\x30\xe7\x9d\xce\xc2\xca\x6a\x0c\x65\x9c\xb5\x60\x14\x0e\x02\x77\xf0\x06\x3e\xe0\x5f\x57\x6a\xaf\xb4\xad\xf2\x06\x5c\xc3\x7c\x85\x6f\xc8\x03\xbd\x18\x70\x12\x67\x61\xc0\xb5\x51\x1f\xeb\x38\x13\xe0\x17\x78\xb2\x89\x3a\xe1\xd4\xc7\xbe\x82\xff\xfb\xc8\x5f\xf4\x41\x98\xf5\xad\x62\x9c\x79\x19\x7e\x37\x54\x9a\x5f\xe6\x00\x3c\x44\x2f\xf0\x3b\xa9\x8e\xb9\x05\xff\x81\x27\x06\x8d\x9b\x39\x05\x77\x87\xb8\x73\x9d\xbd\xd4\x86\x98\xe0\x05\x78\x86\xfc\x05\x1e\x1c\xd4\x26\x98\x05\x1f\xf9\x0b\xee\xc7\x16\x32\xe4\xa9\x8a\xdc\xc3\xac\x2f\xa3\x6d\x38\x99\x79\x10\x7e\x63\x75\x9a\x7f\xea\xd7\x46\xde\xa7\xe7\xe8\x03\xf6\xe0\x7f\x7c\x46\x26\xe0\xb3\x52\xae\x07\x7b\x59\xa3\x7e\x34\x8f\xbf\x77\xe8\x95\x4e\xfb\x37\xfc\x36\x2a\x54\x47\xe0\xa8\x98\xf3\x3c\xf6\x2d\xb5\xe8\xea\xe7\x3a\x84\xdf\x76\x99\x72\x28\xbf\xed\xba\x38\xcb\x7d\xb4\x43\x3d\x99\x2f\x60\x9f\x1e\x66\x2e\xc2\x93\x75\xfc\xcd\x40\x2f\x93\xdf\x2e\xf6\x05\xf5\x02\x0f\xe0\x1c\xce\xa1\x77\xd1\x81\xfd\x80\xc5\x38\x53\x9c\xd5\xfc\x12\x33\xf1\xfb\xf8\x1b\x86\x7d\x78\x14\x3c\xd3\x73\x59\x9c\xd3\x61\x8e\xf4\xea\x4b\xc8\x77\xd0\xf7\xef\x00\x00\x00\xff\xff\x67\x05\xb6\xd4\x00\x10\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1477823658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/002_forum.sql":   dbMigrations002_forumSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": {nil, map[string]*bintree{
			"001_initial.sql": {dbMigrations001_initialSql, map[string]*bintree{}},
			"002_forum.sql":   {dbMigrations002_forumSql, map[string]*bintree{}},
			"bindata.go":      {dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
